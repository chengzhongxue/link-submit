/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.21.0-beta.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JsonPatchInner } from '../models';
// @ts-ignore
import type { LinkSubmit } from '../models';
// @ts-ignore
import type { LinkSubmitList } from '../models';
/**
 * LinkSubmitV1alpha1Api - axios parameter creator
 * @export
 */
export const LinkSubmitV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create LinkSubmit
         * @param {LinkSubmit} [linkSubmit] Fresh linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkSubmit: async (linkSubmit?: LinkSubmit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/linksubmits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkSubmit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLinkSubmit: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/linksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkSubmit: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/linksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List LinkSubmit
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkSubmit: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/linksubmits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLinkSubmit: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/linksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {LinkSubmit} [linkSubmit] Updated linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkSubmit: async (name: string, linkSubmit?: LinkSubmit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/linksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkSubmit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LinkSubmitV1alpha1Api - functional programming interface
 * @export
 */
export const LinkSubmitV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LinkSubmitV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create LinkSubmit
         * @param {LinkSubmit} [linkSubmit] Fresh linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLinkSubmit(linkSubmit?: LinkSubmit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLinkSubmit(linkSubmit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkSubmitV1alpha1Api.createLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLinkSubmit(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLinkSubmit(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkSubmitV1alpha1Api.deleteLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLinkSubmit(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkSubmit(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkSubmitV1alpha1Api.getLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List LinkSubmit
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLinkSubmit(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkSubmitList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLinkSubmit(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkSubmitV1alpha1Api.listLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLinkSubmit(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLinkSubmit(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkSubmitV1alpha1Api.patchLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update LinkSubmit
         * @param {string} name Name of linksubmit
         * @param {LinkSubmit} [linkSubmit] Updated linksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLinkSubmit(name: string, linkSubmit?: LinkSubmit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLinkSubmit(name, linkSubmit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LinkSubmitV1alpha1Api.updateLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LinkSubmitV1alpha1Api - factory interface
 * @export
 */
export const LinkSubmitV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LinkSubmitV1alpha1ApiFp(configuration)
    return {
        /**
         * Create LinkSubmit
         * @param {LinkSubmitV1alpha1ApiCreateLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiCreateLinkSubmitRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LinkSubmit> {
            return localVarFp.createLinkSubmit(requestParameters.linkSubmit, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete LinkSubmit
         * @param {LinkSubmitV1alpha1ApiDeleteLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiDeleteLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLinkSubmit(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get LinkSubmit
         * @param {LinkSubmitV1alpha1ApiGetLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiGetLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<LinkSubmit> {
            return localVarFp.getLinkSubmit(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List LinkSubmit
         * @param {LinkSubmitV1alpha1ApiListLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiListLinkSubmitRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LinkSubmitList> {
            return localVarFp.listLinkSubmit(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch LinkSubmit
         * @param {LinkSubmitV1alpha1ApiPatchLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiPatchLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<LinkSubmit> {
            return localVarFp.patchLinkSubmit(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update LinkSubmit
         * @param {LinkSubmitV1alpha1ApiUpdateLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiUpdateLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<LinkSubmit> {
            return localVarFp.updateLinkSubmit(requestParameters.name, requestParameters.linkSubmit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLinkSubmit operation in LinkSubmitV1alpha1Api.
 * @export
 * @interface LinkSubmitV1alpha1ApiCreateLinkSubmitRequest
 */
export interface LinkSubmitV1alpha1ApiCreateLinkSubmitRequest {
    /**
     * Fresh linksubmit
     * @type {LinkSubmit}
     * @memberof LinkSubmitV1alpha1ApiCreateLinkSubmit
     */
    readonly linkSubmit?: LinkSubmit
}

/**
 * Request parameters for deleteLinkSubmit operation in LinkSubmitV1alpha1Api.
 * @export
 * @interface LinkSubmitV1alpha1ApiDeleteLinkSubmitRequest
 */
export interface LinkSubmitV1alpha1ApiDeleteLinkSubmitRequest {
    /**
     * Name of linksubmit
     * @type {string}
     * @memberof LinkSubmitV1alpha1ApiDeleteLinkSubmit
     */
    readonly name: string
}

/**
 * Request parameters for getLinkSubmit operation in LinkSubmitV1alpha1Api.
 * @export
 * @interface LinkSubmitV1alpha1ApiGetLinkSubmitRequest
 */
export interface LinkSubmitV1alpha1ApiGetLinkSubmitRequest {
    /**
     * Name of linksubmit
     * @type {string}
     * @memberof LinkSubmitV1alpha1ApiGetLinkSubmit
     */
    readonly name: string
}

/**
 * Request parameters for listLinkSubmit operation in LinkSubmitV1alpha1Api.
 * @export
 * @interface LinkSubmitV1alpha1ApiListLinkSubmitRequest
 */
export interface LinkSubmitV1alpha1ApiListLinkSubmitRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof LinkSubmitV1alpha1ApiListLinkSubmit
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof LinkSubmitV1alpha1ApiListLinkSubmit
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof LinkSubmitV1alpha1ApiListLinkSubmit
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof LinkSubmitV1alpha1ApiListLinkSubmit
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof LinkSubmitV1alpha1ApiListLinkSubmit
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchLinkSubmit operation in LinkSubmitV1alpha1Api.
 * @export
 * @interface LinkSubmitV1alpha1ApiPatchLinkSubmitRequest
 */
export interface LinkSubmitV1alpha1ApiPatchLinkSubmitRequest {
    /**
     * Name of linksubmit
     * @type {string}
     * @memberof LinkSubmitV1alpha1ApiPatchLinkSubmit
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof LinkSubmitV1alpha1ApiPatchLinkSubmit
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateLinkSubmit operation in LinkSubmitV1alpha1Api.
 * @export
 * @interface LinkSubmitV1alpha1ApiUpdateLinkSubmitRequest
 */
export interface LinkSubmitV1alpha1ApiUpdateLinkSubmitRequest {
    /**
     * Name of linksubmit
     * @type {string}
     * @memberof LinkSubmitV1alpha1ApiUpdateLinkSubmit
     */
    readonly name: string

    /**
     * Updated linksubmit
     * @type {LinkSubmit}
     * @memberof LinkSubmitV1alpha1ApiUpdateLinkSubmit
     */
    readonly linkSubmit?: LinkSubmit
}

/**
 * LinkSubmitV1alpha1Api - object-oriented interface
 * @export
 * @class LinkSubmitV1alpha1Api
 * @extends {BaseAPI}
 */
export class LinkSubmitV1alpha1Api extends BaseAPI {
    /**
     * Create LinkSubmit
     * @param {LinkSubmitV1alpha1ApiCreateLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkSubmitV1alpha1Api
     */
    public createLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiCreateLinkSubmitRequest = {}, options?: RawAxiosRequestConfig) {
        return LinkSubmitV1alpha1ApiFp(this.configuration).createLinkSubmit(requestParameters.linkSubmit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete LinkSubmit
     * @param {LinkSubmitV1alpha1ApiDeleteLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkSubmitV1alpha1Api
     */
    public deleteLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiDeleteLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return LinkSubmitV1alpha1ApiFp(this.configuration).deleteLinkSubmit(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get LinkSubmit
     * @param {LinkSubmitV1alpha1ApiGetLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkSubmitV1alpha1Api
     */
    public getLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiGetLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return LinkSubmitV1alpha1ApiFp(this.configuration).getLinkSubmit(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List LinkSubmit
     * @param {LinkSubmitV1alpha1ApiListLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkSubmitV1alpha1Api
     */
    public listLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiListLinkSubmitRequest = {}, options?: RawAxiosRequestConfig) {
        return LinkSubmitV1alpha1ApiFp(this.configuration).listLinkSubmit(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch LinkSubmit
     * @param {LinkSubmitV1alpha1ApiPatchLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkSubmitV1alpha1Api
     */
    public patchLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiPatchLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return LinkSubmitV1alpha1ApiFp(this.configuration).patchLinkSubmit(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update LinkSubmit
     * @param {LinkSubmitV1alpha1ApiUpdateLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkSubmitV1alpha1Api
     */
    public updateLinkSubmit(requestParameters: LinkSubmitV1alpha1ApiUpdateLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return LinkSubmitV1alpha1ApiFp(this.configuration).updateLinkSubmit(requestParameters.name, requestParameters.linkSubmit, options).then((request) => request(this.axios, this.basePath));
    }
}

