/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.21.0-beta.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CronLinkSubmit } from '../models';
// @ts-ignore
import type { CronLinkSubmitList } from '../models';
// @ts-ignore
import type { JsonPatchInner } from '../models';
/**
 * CronLinkSubmitV1alpha1Api - axios parameter creator
 * @export
 */
export const CronLinkSubmitV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create CronLinkSubmit
         * @param {CronLinkSubmit} [cronLinkSubmit] Fresh cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCronLinkSubmit: async (cronLinkSubmit?: CronLinkSubmit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/cronlinksubmits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cronLinkSubmit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCronLinkSubmit: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteCronLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/cronlinksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCronLinkSubmit: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getCronLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/cronlinksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List CronLinkSubmit
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCronLinkSubmit: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/cronlinksubmits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCronLinkSubmit: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchCronLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/cronlinksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {CronLinkSubmit} [cronLinkSubmit] Updated cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCronLinkSubmit: async (name: string, cronLinkSubmit?: CronLinkSubmit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateCronLinkSubmit', 'name', name)
            const localVarPath = `/apis/link.submit.kunkunyu.com/v1alpha1/cronlinksubmits/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cronLinkSubmit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CronLinkSubmitV1alpha1Api - functional programming interface
 * @export
 */
export const CronLinkSubmitV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CronLinkSubmitV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create CronLinkSubmit
         * @param {CronLinkSubmit} [cronLinkSubmit] Fresh cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCronLinkSubmit(cronLinkSubmit?: CronLinkSubmit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronLinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCronLinkSubmit(cronLinkSubmit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronLinkSubmitV1alpha1Api.createCronLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCronLinkSubmit(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCronLinkSubmit(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronLinkSubmitV1alpha1Api.deleteCronLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCronLinkSubmit(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronLinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCronLinkSubmit(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronLinkSubmitV1alpha1Api.getCronLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List CronLinkSubmit
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCronLinkSubmit(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronLinkSubmitList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCronLinkSubmit(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronLinkSubmitV1alpha1Api.listCronLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCronLinkSubmit(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronLinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCronLinkSubmit(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronLinkSubmitV1alpha1Api.patchCronLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update CronLinkSubmit
         * @param {string} name Name of cronlinksubmit
         * @param {CronLinkSubmit} [cronLinkSubmit] Updated cronlinksubmit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCronLinkSubmit(name: string, cronLinkSubmit?: CronLinkSubmit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronLinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCronLinkSubmit(name, cronLinkSubmit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronLinkSubmitV1alpha1Api.updateCronLinkSubmit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CronLinkSubmitV1alpha1Api - factory interface
 * @export
 */
export const CronLinkSubmitV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CronLinkSubmitV1alpha1ApiFp(configuration)
    return {
        /**
         * Create CronLinkSubmit
         * @param {CronLinkSubmitV1alpha1ApiCreateCronLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiCreateCronLinkSubmitRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CronLinkSubmit> {
            return localVarFp.createCronLinkSubmit(requestParameters.cronLinkSubmit, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete CronLinkSubmit
         * @param {CronLinkSubmitV1alpha1ApiDeleteCronLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiDeleteCronLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCronLinkSubmit(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CronLinkSubmit
         * @param {CronLinkSubmitV1alpha1ApiGetCronLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiGetCronLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<CronLinkSubmit> {
            return localVarFp.getCronLinkSubmit(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List CronLinkSubmit
         * @param {CronLinkSubmitV1alpha1ApiListCronLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiListCronLinkSubmitRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CronLinkSubmitList> {
            return localVarFp.listCronLinkSubmit(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch CronLinkSubmit
         * @param {CronLinkSubmitV1alpha1ApiPatchCronLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiPatchCronLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<CronLinkSubmit> {
            return localVarFp.patchCronLinkSubmit(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update CronLinkSubmit
         * @param {CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<CronLinkSubmit> {
            return localVarFp.updateCronLinkSubmit(requestParameters.name, requestParameters.cronLinkSubmit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCronLinkSubmit operation in CronLinkSubmitV1alpha1Api.
 * @export
 * @interface CronLinkSubmitV1alpha1ApiCreateCronLinkSubmitRequest
 */
export interface CronLinkSubmitV1alpha1ApiCreateCronLinkSubmitRequest {
    /**
     * Fresh cronlinksubmit
     * @type {CronLinkSubmit}
     * @memberof CronLinkSubmitV1alpha1ApiCreateCronLinkSubmit
     */
    readonly cronLinkSubmit?: CronLinkSubmit
}

/**
 * Request parameters for deleteCronLinkSubmit operation in CronLinkSubmitV1alpha1Api.
 * @export
 * @interface CronLinkSubmitV1alpha1ApiDeleteCronLinkSubmitRequest
 */
export interface CronLinkSubmitV1alpha1ApiDeleteCronLinkSubmitRequest {
    /**
     * Name of cronlinksubmit
     * @type {string}
     * @memberof CronLinkSubmitV1alpha1ApiDeleteCronLinkSubmit
     */
    readonly name: string
}

/**
 * Request parameters for getCronLinkSubmit operation in CronLinkSubmitV1alpha1Api.
 * @export
 * @interface CronLinkSubmitV1alpha1ApiGetCronLinkSubmitRequest
 */
export interface CronLinkSubmitV1alpha1ApiGetCronLinkSubmitRequest {
    /**
     * Name of cronlinksubmit
     * @type {string}
     * @memberof CronLinkSubmitV1alpha1ApiGetCronLinkSubmit
     */
    readonly name: string
}

/**
 * Request parameters for listCronLinkSubmit operation in CronLinkSubmitV1alpha1Api.
 * @export
 * @interface CronLinkSubmitV1alpha1ApiListCronLinkSubmitRequest
 */
export interface CronLinkSubmitV1alpha1ApiListCronLinkSubmitRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof CronLinkSubmitV1alpha1ApiListCronLinkSubmit
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof CronLinkSubmitV1alpha1ApiListCronLinkSubmit
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof CronLinkSubmitV1alpha1ApiListCronLinkSubmit
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof CronLinkSubmitV1alpha1ApiListCronLinkSubmit
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof CronLinkSubmitV1alpha1ApiListCronLinkSubmit
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchCronLinkSubmit operation in CronLinkSubmitV1alpha1Api.
 * @export
 * @interface CronLinkSubmitV1alpha1ApiPatchCronLinkSubmitRequest
 */
export interface CronLinkSubmitV1alpha1ApiPatchCronLinkSubmitRequest {
    /**
     * Name of cronlinksubmit
     * @type {string}
     * @memberof CronLinkSubmitV1alpha1ApiPatchCronLinkSubmit
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof CronLinkSubmitV1alpha1ApiPatchCronLinkSubmit
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateCronLinkSubmit operation in CronLinkSubmitV1alpha1Api.
 * @export
 * @interface CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmitRequest
 */
export interface CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmitRequest {
    /**
     * Name of cronlinksubmit
     * @type {string}
     * @memberof CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmit
     */
    readonly name: string

    /**
     * Updated cronlinksubmit
     * @type {CronLinkSubmit}
     * @memberof CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmit
     */
    readonly cronLinkSubmit?: CronLinkSubmit
}

/**
 * CronLinkSubmitV1alpha1Api - object-oriented interface
 * @export
 * @class CronLinkSubmitV1alpha1Api
 * @extends {BaseAPI}
 */
export class CronLinkSubmitV1alpha1Api extends BaseAPI {
    /**
     * Create CronLinkSubmit
     * @param {CronLinkSubmitV1alpha1ApiCreateCronLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronLinkSubmitV1alpha1Api
     */
    public createCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiCreateCronLinkSubmitRequest = {}, options?: RawAxiosRequestConfig) {
        return CronLinkSubmitV1alpha1ApiFp(this.configuration).createCronLinkSubmit(requestParameters.cronLinkSubmit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete CronLinkSubmit
     * @param {CronLinkSubmitV1alpha1ApiDeleteCronLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronLinkSubmitV1alpha1Api
     */
    public deleteCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiDeleteCronLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return CronLinkSubmitV1alpha1ApiFp(this.configuration).deleteCronLinkSubmit(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CronLinkSubmit
     * @param {CronLinkSubmitV1alpha1ApiGetCronLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronLinkSubmitV1alpha1Api
     */
    public getCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiGetCronLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return CronLinkSubmitV1alpha1ApiFp(this.configuration).getCronLinkSubmit(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List CronLinkSubmit
     * @param {CronLinkSubmitV1alpha1ApiListCronLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronLinkSubmitV1alpha1Api
     */
    public listCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiListCronLinkSubmitRequest = {}, options?: RawAxiosRequestConfig) {
        return CronLinkSubmitV1alpha1ApiFp(this.configuration).listCronLinkSubmit(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch CronLinkSubmit
     * @param {CronLinkSubmitV1alpha1ApiPatchCronLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronLinkSubmitV1alpha1Api
     */
    public patchCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiPatchCronLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return CronLinkSubmitV1alpha1ApiFp(this.configuration).patchCronLinkSubmit(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update CronLinkSubmit
     * @param {CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronLinkSubmitV1alpha1Api
     */
    public updateCronLinkSubmit(requestParameters: CronLinkSubmitV1alpha1ApiUpdateCronLinkSubmitRequest, options?: RawAxiosRequestConfig) {
        return CronLinkSubmitV1alpha1ApiFp(this.configuration).updateCronLinkSubmit(requestParameters.name, requestParameters.cronLinkSubmit, options).then((request) => request(this.axios, this.basePath));
    }
}

