/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.21.0-beta.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CheckLinkSubmitRequest } from '../models';
// @ts-ignore
import type { LinkSubmit } from '../models';
// @ts-ignore
import type { LinkSubmitList } from '../models';
/**
 * ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi - axios parameter creator
 * @export
 */
export const ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 友链提交审核操作
         * @param {string} name 
         * @param {CheckLinkSubmitRequest} checkLinkSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check: async (name: string, checkLinkSubmitRequest: CheckLinkSubmitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('check', 'name', name)
            // verify required parameter 'checkLinkSubmitRequest' is not null or undefined
            assertParamExists('check', 'checkLinkSubmitRequest', checkLinkSubmitRequest)
            const localVarPath = `/apis/console.api.link.submit.kunkunyu.com/v1alpha1/linksubmits/{name}/check`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkLinkSubmitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List LinkSubmits.
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] LinkSubmits filtered by keyword.
         * @param {string} [type] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkSubmits: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, type?: string, status?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/console.api.link.submit.kunkunyu.com/v1alpha1/linksubmits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi - functional programming interface
 * @export
 */
export const ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiAxiosParamCreator(configuration)
    return {
        /**
         * 友链提交审核操作
         * @param {string} name 
         * @param {CheckLinkSubmitRequest} checkLinkSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check(name: string, checkLinkSubmitRequest: CheckLinkSubmitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkSubmit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check(name, checkLinkSubmitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi.check']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List LinkSubmits.
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] LinkSubmits filtered by keyword.
         * @param {string} [type] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLinkSubmits(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, type?: string, status?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkSubmitList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLinkSubmits(page, size, labelSelector, fieldSelector, sort, keyword, type, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi.listLinkSubmits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi - factory interface
 * @export
 */
export const ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiFp(configuration)
    return {
        /**
         * 友链提交审核操作
         * @param {ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(requestParameters: ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<LinkSubmit> {
            return localVarFp.check(requestParameters.name, requestParameters.checkLinkSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List LinkSubmits.
         * @param {ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkSubmits(requestParameters: ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmitsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LinkSubmitList> {
            return localVarFp.listLinkSubmits(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.type, requestParameters.status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for check operation in ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi.
 * @export
 * @interface ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheckRequest
 */
export interface ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheckRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheck
     */
    readonly name: string

    /**
     * 
     * @type {CheckLinkSubmitRequest}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheck
     */
    readonly checkLinkSubmitRequest: CheckLinkSubmitRequest
}

/**
 * Request parameters for listLinkSubmits operation in ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi.
 * @export
 * @interface ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmitsRequest
 */
export interface ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmitsRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly sort?: Array<string>

    /**
     * LinkSubmits filtered by keyword.
     * @type {string}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly keyword?: string

    /**
     * 
     * @type {string}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmits
     */
    readonly status?: string
}

/**
 * ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi - object-oriented interface
 * @export
 * @class ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi
 * @extends {BaseAPI}
 */
export class ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi extends BaseAPI {
    /**
     * 友链提交审核操作
     * @param {ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi
     */
    public check(requestParameters: ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiCheckRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiFp(this.configuration).check(requestParameters.name, requestParameters.checkLinkSubmitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List LinkSubmits.
     * @param {ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApi
     */
    public listLinkSubmits(requestParameters: ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiListLinkSubmitsRequest = {}, options?: RawAxiosRequestConfig) {
        return ConsoleApiLinkSubmitKunkunyuComV1alpha1ListLinkSubmitApiFp(this.configuration).listLinkSubmits(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.type, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }
}

